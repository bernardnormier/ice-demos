#!/usr/bin/env ruby
# Copyright (c) ZeroC, Inc.

require 'etc'
require 'Ice'

# Load the code generated by the Slice compiler. The Slice module VisitorCenter maps to a Ruby module with the same
# name.
require_relative 'Greeter.rb'

# Create Ice properties from the contents of the config.client file in the current working directory.
initData = Ice::InitializationData.new()
initData.properties = Ice.createProperties()
initData.properties.load("config.client")

# Create an Ice communicator. We'll use this communicator to create proxies and manage outgoing connections.
# The communicator gets its properties from initData.properties; Ice.* properties and other reserved properties
# set in ARGV override these properties.

Ice::initialize(ARGV, initData) do |communicator|
    # We create a Greeter proxy using the value of the Greeter.Proxy property in config.client.
    greeter = VisitorCenter::GreeterPrx.uncheckedCast(communicator.propertyToProxy("Greeter.Proxy"))

    # Send a request to the remote object and get the response.
    greeting = greeter.greet(Etc.getlogin)

    puts greeting
end
